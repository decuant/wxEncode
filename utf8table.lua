-- ----------------------------------------------------------------------------
--
--  UTF_8 conversion table
--
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------
--
local tUtf8Table =
{
	{ 0x00, 0x7f,  nil, 0x00, 0x7f },
	{ 0x80, 0xbf, 0xc2, 0x80, 0x3f },
	{ 0xc0, 0xff, 0xc3, 0x80, 0x3f },
	
	
	{ 0x0152, 0x0153, 0xc5, 0x92, 0x01 },
	{ 0x0160, 0x0161, 0xc5, 0xa0, 0x01 },
	{ 0x0178, 0x0178, 0xc5, 0xb8, 0x00 },
	{ 0x0192, 0x0192, 0xc6, 0x92, 0x00 },
	{ 0x02c6, 0x02c6, 0xcb, 0x86, 0x00 },
	{ 0x02dc, 0x02dc, 0xcb, 0x9b, 0x00 },
	{ 0x0391, 0x03a1, 0xce, 0x91, 0x10 },
	{ 0x03a3, 0x03a9, 0xce, 0xa3, 0x06 },
	{ 0x03b1, 0x03bf, 0xce, 0xb1, 0x0e },
	{ 0x03c0, 0x03c9, 0xcf, 0x80, 0x09 },
	{ 0x03d1, 0x03d2, 0xcf, 0x91, 0x01 },
	{ 0x03d6, 0x03d6, 0xcf, 0x96, 0x00 },
	
}

-- ----------------------------------------------------------------------------
--
function get2BytesRow(inByteArray)

	-- get the double byte code
	--
	local dwCurHigh = inByteArray:sub(1, 1):byte()
	
	for _, tUTFRow in ipairs(tUtf8Table) do
		
		if tUTFRow[3] == dwCurHigh then
			
			dwCurLow = inByteArray:sub(2, 2):byte()
			
			if tUTFRow[4] <= dwCurLow and dwCurLow <= (tUTFRow[4] + tUTFRow[5]) then
			
				return tUTFRow
			end
		end
	end
	
	return nil	
end

-- ----------------------------------------------------------------------------
--

function get1ByteRow(inByteArray)

	-- get the double byte code
	--
	local dwCurrent = inByteArray:sub(1, 1):byte()
	
	for i, tUTFRow in ipairs(tUtf8Table) do
		
		if 4 == i then break end
						
		if tUTFRow[1] <= dwCurrent and dwCurrent <= tUTFRow[2] then
			
			return tUTFRow
		end
	end
	
	return nil	
end

-- ----------------------------------------------------------------------------
--
local tUtf8TableEx =
{
	{ 0x2002, 0x2003, 0xe2, 0x80, 0x82 },
	{ 0x2009, 0x2009, 0xe2, 0x80, 0x89 },
	{ 0x200c, 0x200f, 0xe2, 0x80, 0x8c },
	{ 0x2013, 0x2014, 0xe2, 0x80, 0x93 },
	{ 0x2018, 0x201a, 0xe2, 0x80, 0x98 },
	{ 0x201c, 0x201e, 0xe2, 0x80, 0x9c },
	{ 0x2020, 0x2022, 0xe2, 0x80, 0xa0 },
	{ 0x2026, 0x2026, 0xe2, 0x80, 0xa6 },
	{ 0x2030, 0x2030, 0xe2, 0x80, 0xb0 },
	{ 0x2032, 0x2033, 0xe2, 0x80, 0xb2 },
	{ 0x2039, 0x203a, 0xe2, 0x80, 0xb9 },
	{ 0x203e, 0x203e, 0xe2, 0x80, 0xbe },
	{ 0x2044, 0x2044, 0xe2, 0x81, 0x84 },
	{ 0x20ac, 0x20ac, 0xe2, 0x82, 0xac },
	{ 0x2111, 0x2111, 0xe2, 0x84, 0x91 },
	{ 0x2118, 0x2118, 0xe2, 0x84, 0x98 },
	{ 0x211c, 0x211c, 0xe2, 0x84, 0x9c },
	{ 0x2122, 0x2122, 0xe2, 0x84, 0xa2 },
	{ 0x2135, 0x2135, 0xe2, 0x84, 0xb5 },
	{ 0x2190, 0x2194, 0xe2, 0x86, 0x90 },
	{ 0x21b5, 0x21b5, 0xe2, 0x86, 0xb5 },
	{ 0x21d0, 0x21d4, 0xe2, 0x87, 0x90 },
	{ 0x2200, 0x2200, 0xe2, 0x88, 0x80 },
	{ 0x2202, 0x2203, 0xe2, 0x88, 0x82 },
	{ 0x2205, 0x2205, 0xe2, 0x88, 0x85 },
	{ 0x2207, 0x2209, 0xe2, 0x88, 0x87 },
	{ 0x220b, 0x220b, 0xe2, 0x88, 0x8b },
	{ 0x220f, 0x220f, 0xe2, 0x88, 0x8f },
	{ 0x2211, 0x2212, 0xe2, 0x88, 0x91 },
	{ 0x2217, 0x2217, 0xe2, 0x88, 0x97 },
	{ 0x221a, 0x221a, 0xe2, 0x88, 0x9a },
	{ 0x221d, 0x221e, 0xe2, 0x88, 0x9d },
	{ 0x2220, 0x2220, 0xe2, 0x88, 0xa0 },
	{ 0x2227, 0x222b, 0xe2, 0x88, 0xa7 },
	{ 0x2234, 0x2234, 0xe2, 0x88, 0xb4 },
	{ 0x223c, 0x223c, 0xe2, 0x88, 0xbc },
	{ 0x2245, 0x2245, 0xe2, 0x89, 0x85 },
	{ 0x2248, 0x2248, 0xe2, 0x89, 0x88 },
	{ 0x2260, 0x2261, 0xe2, 0x89, 0xa0 },
	{ 0x2264, 0x2265, 0xe2, 0x89, 0xa4 },
	{ 0x2282, 0x2284, 0xe2, 0x8a, 0x82 },
	{ 0x2286, 0x2287, 0xe2, 0x8a, 0x86 },
	{ 0x2295, 0x2295, 0xe2, 0x8a, 0x95 },
	{ 0x2297, 0x2297, 0xe2, 0x8a, 0x97 },
	{ 0x22a5, 0x22a5, 0xe2, 0x8a, 0xa5 },
	{ 0x22c5, 0x22c5, 0xe2, 0x8b, 0x85 },
	{ 0x2308, 0x230b, 0xe2, 0x8c, 0x88 },
	{ 0x2329, 0x2329, 0xe2, 0x8c, 0xa9 },
	{ 0x232a, 0x232a, 0xe2, 0x8c, 0xaa },
	{ 0x25ca, 0x25ca, 0xe2, 0x97, 0x8a },
	{ 0x2660, 0x2660, 0xe2, 0x99, 0xa0 },
	{ 0x2663, 0x2663, 0xe2, 0x99, 0xa3 },
	{ 0x2665, 0x2666, 0xe2, 0x99, 0xa5 },
 
}

-- ----------------------------------------------------------------------------
--
return tUtf8Table

-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
